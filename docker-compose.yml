version: '3.8'

services:
  # PostgreSQL Database (Main Database)
  postgres:
    image: postgres:15-alpine
    container_name: booking-system-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: booking_system
      POSTGRES_USER: booking_user
      POSTGRES_PASSWORD: booking_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - booking-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U booking_user -d booking_system"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MongoDB Database (Audit Logs)
  mongodb:
    image: mongo:7.0
    container_name: booking-system-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin_password
      MONGO_INITDB_DATABASE: booking-system-audit
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./mongo-init:/docker-entrypoint-initdb.d
    networks:
      - booking-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache & Lock Service
  redis:
    image: redis:7.2-alpine
    container_name: booking-system-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass redis_password
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - booking-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Commander (Redis Management UI)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: booking-system-redis-commander
    restart: unless-stopped
    environment:
      REDIS_HOSTS: "local:redis:6379:0:redis_password"
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - booking-network

  # MongoDB Express (MongoDB Management UI)
  mongo-express:
    image: mongo-express:1.0.0
    container_name: booking-system-mongo-express
    restart: unless-stopped
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: admin_password
      ME_CONFIG_MONGODB_URL: mongodb://admin:admin_password@mongodb:27017/
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: admin_password
    ports:
      - "8082:8081"
    depends_on:
      - mongodb
    networks:
      - booking-network

  # pgAdmin (PostgreSQL Management UI)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: booking-system-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@booking-system.com
      PGADMIN_DEFAULT_PASSWORD: admin_password
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "8083:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - booking-network

  # NestJS Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: booking-system-app
    restart: unless-stopped
    environment:
      # Database Configuration
      DATABASE_URL: "postgresql://booking_user:booking_password@postgres:5432/booking_system?schema=public"
      MONGODB_URI: "mongodb://admin:admin_password@mongodb:27017/booking-system-audit?authSource=admin"
      REDIS_URL: "redis://:redis_password@redis:6379"
      
      # Application Configuration
      NODE_ENV: "development"
      PORT: "3000"
      JWT_SECRET: "your-super-secret-jwt-key-change-in-production"
      JWT_EXPIRES_IN: "7d"
      
      # Email Configuration (SendGrid)
      SENDGRID_API_KEY: "SG.dummy-key-for-development"
      FROM_EMAIL: "noreply@booking-system.com"
      
      # Booking Configuration
      BOOKING_PAYMENT_DEADLINE_MINUTES: "10"
      
      # Redis Lock Configuration
      REDIS_LOCK_TTL: "30000"
      REDIS_LOCK_RETRY_DELAY: "100"
      REDIS_LOCK_MAX_RETRIES: "10"
      NODE_ENV: "production"
      NODE_OPTIONS: ""
      
    command: ["sh","-lc","exec node dist/main.js"]  
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - booking-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  postgres_data:
    driver: local
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  booking-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16